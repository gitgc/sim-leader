# Reusable configuration blocks
x-healthcheck-defaults: &healthcheck-defaults
  interval: 10s
  timeout: 5s
  retries: 3
  start_period: 30s

services:
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    # Uncomment for database debugging/access from host:
    # ports:
    #   - 5432:5432
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      <<: *healthcheck-defaults
      test: [CMD-SHELL, "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
    networks:
      - app-network

  app:
    build: .
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - PORT=${PORT}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - AUTHORIZED_EMAILS=${AUTHORIZED_EMAILS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - NODE_ENV=${NODE_ENV:-production}
    volumes:
      - uploads_shared:/usr/src/app/public/uploads
      - ./logs:/usr/src/app/logs
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "10"
    healthcheck:
      <<: *healthcheck-defaults
      test: [CMD-SHELL, "curl -f http://localhost:${PORT}/ || exit 1"]
    networks:
      - app-network

  caddy:
    build:
      context: .
      dockerfile: Dockerfile.caddy
    ports:
      - 80:80
      - 443:443
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - CADDY_EMAIL=${CADDY_EMAIL}
      - DIGITALOCEAN_API_TOKEN=${DIGITALOCEAN_API_TOKEN}
    volumes:
      # Choose one Caddyfile based on your deployment mode:
      # For HTTP mode (development/testing):
      - ./config/Caddyfile.http:/etc/caddy/Caddyfile:ro
      # For HTTPS production mode (Let's Encrypt):
      # - ./config/Caddyfile.https-production:/etc/caddy/Caddyfile:ro
      - uploads_shared:/var/www/html/uploads:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    depends_on:
      app:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "7"
    networks:
      - app-network

volumes:
  db_data:
  caddy_data:
  caddy_config:
  caddy_logs:
  uploads_shared:

networks:
  app-network:
    driver: bridge
